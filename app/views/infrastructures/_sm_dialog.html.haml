%h2= t('infrastructure.tree.sm_dialog.header')

%a.close-reveal-modal &#215;

- begin
  %h3= t('.resource_header', resource_id: record.resource_id, facade_name: facade.long_name)

  .row.small-12.columns
    .small-2.columns.action-button
      %span#restart_simulation_manager_button{class: button_classes}
        %i.fi-refresh
        = raw '&nbsp;&nbsp;'
        = t('.restart')

    .small-2.columns.action-button
      - if [:error, :terminating].include? record.state
        %span#destroy_record_simulation_manager_button{class: "#{button_classes} alert"}
          %i.fi-x
          = raw '&nbsp;&nbsp;'
          = t('.remove')
      - else
        %span#stop_simulation_manager_button{class: "#{button_classes} alert"}
          %i.fi-stop
          = raw '&nbsp;&nbsp;'
          = t('.stop')
    .small-8.columns

  .row.small-12.columns
    %ul
      - unless record.onsite_monitoring
        %li
          %strong= t('.resource_state') + ': '
          #resource-state{style: 'display: inline;'}
            = image_tag 'loading.gif', size: '16x16'

      -# infrastructure-specific info
      -begin
        = render partial: "infrastructures/scheduler/simulation_managers_info/#{partial_name}", locals: {record: record}
      -rescue ActionView::MissingTemplate => exc
        = exc.to_s
        -# ignore if not found

      -# general record info
      - record_state = t("infrastructures.sm_dialog.state.#{record.state}",
          default: t('infrastructures.sm_dialog.state.unknown'))
      %li
        %strong= t('infrastructures.sm_dialog.simulation_manager_state') + ': '
        =record_state
      - if record.state == :error
        %ul
          %li
            %strong= t('infrastructures.sm_dialog.error_message') + ': '
            = t('infrastructure.information.sm_info.errors.'+record.error, default: record.error)
            - unless record.error_log.nil?
              %li
                %strong= t('infrastructure.information.sm_info.error_log') + ': '
                .panel.log-box
                  - record.error_log.split("\n").each do |line|
                    = line
                    %br
      - elsif record.state == :initialized
        %li
          %strong= t('infrastructures.sm_dialog.sm_initialized_at') + ':'
          #sm-installed-at-date
      %li
        %strong= t('infrastructures.sm_dialog.created_at') + ': '
        #sm-created-at-date{style: 'display: inline;'}
      %li
        %strong= t('infrastructures.sm_dialog.time_limit') + ': '
        ="#{record.time_limit.to_s} minutes (will work until: "
        - time_limit_until = record.created_at.since(record.time_limit.to_i.minutes).to_i
        #sm-time-limit-until{style: 'display: inline'}
        =')'
      %li
        %strong= t('infrastructures.sm_dialog.experiment') + ': '
        - if record.experiment
          = link_to "#{record.experiment.name}", experiment_path(record.experiment_id)
        - else
          = t('infrastructure.information.sm_record_error', error: t('infrastructure.information.experiment_not_found'))


- rescue Exception => e
  =t('infrastructure.information.sm_record_error', error: e.to_s)

:javascript
  $(function() {
    $(document).foundation();

    new window.SmDialog("#dialog", "#{facade.short_name}", "#{record.id}");

    display_date("#sm-initialized-at-date", #{record.initialized_at.to_i});
    display_date("#sm-created-at-date", #{record.created_at.to_i});
    display_date("#sm-time-limit-until", #{time_limit_until});
  });