-# will be used as computed value of input definition designer
%input#designer_value{type: 'hidden', name: 'simulation_input'}

.row
  %fieldset#input-definition
    %legend= t('simulations.registration.simulation_input')

    .row{class: 'menu', style: 'margin-top: -3rem;'}
      %ul.button-group.right.round
        %li
          %a#input-designer-on.tiny.button.secondary(href="#") Design
        %li
          %a#input-designer-off.tiny.button.secondary(href="#") Upload JSON

    .row#input-upload.hide
      .small-5.columns
        %label.right.inline{for: 'simulation_input'}= t("simulations.registration.simulation_input_desc") + ':'
      .small-7.columns
        = file_field_tag 'simulation_input', id: 'simulation_input_file'
        %small(class="error") Simulation input file is required

    .row#input-designer.hide
      .row
        .small-10.columns.small-centered
          #cannot_edit_alert.alert-box.warning.radius.hidden{'data-alert' => true}
            ="This simulation scenario input definition cannot be edited with graphical editor due to its nested structure. If you use editor, it will overwrite old input definition."


      .small-5.columns
        %fieldset#param-list
          %legend= "Parameters"
          .row
            %ul.stack-for-small.button-group
              %li
                %a.button.tiny.radius#add-param.unselectable
                  %i.fa.fa-plus.fa-fw
                  = 'Add'
              %li
                %a.button.tiny.radius#remove-param.unselectable
                  %i.fa.fa-minus.fa-fw
                  = 'Remove'
          .row#params-tree.hidden
      .small-7.columns
        %fieldset{id: "param-config", class:"hidden", "data_abide" =>''}
          %legend= "Parameter specification"
          .row
            .small-3.columns
              %label.right.inline{for: 'param_id'}= 'Parameter ID:'
            .small-9.columns
              %input#param_id{type: 'text', name: 'param_id',  pattern: "^[\\w-]+$"}
              %small(class="error") Id is required -type only letters, digits, '-' and '_'
          .row
            .small-3.columns
              %label.right.inline{for: 'param_label'}= 'Label:'
            .small-9.columns
              %input#param_label{type: 'text', name: 'param_label'}
          .row
            .small-3.columns
              %label.right.inline{for: 'param_type'}= 'Type:'
            .small-9.columns
              %select#param_type{name: 'param_type'}
                %option{value: 'integer'}= "Integer"
                %option{value: 'float'}= "Float"
                %option{value: 'string'}= "String"

          .row#param-range.hidden
            .small-6.columns
              .row
                .small-3.columns
                  %label.right.inline{id: "label_min", for: 'param_min'}= 'Min:'
                .small-9.columns
                  %input#param_min{type: 'text', name: 'param_min', pattern: "^-?[0-9]*\\.?[0-9]+$", "data-abide-validator" => "validate_ranges"}
                  %small(id="param_min_error_msg" class="error") Invalid minimum value. It is required and must be equal to or less than maximum
            .small-6.columns
              .row
                .small-3.columns
                  %label.right.inline{id: "label_max", for: 'param_max'}= 'Max:'
                .small-9.columns
                  %input#param_max{type: 'text', name: 'param_max', pattern: "^-?[0-9]*\\.?[0-9]+$", "data-abide-validator" => "validate_ranges" }
                  %small(id="param_max_error_msg" class="error") Invalid maximum value. It is required and must be equal to or greater than minimum
          .row#param-allowed.hidden
            .small-3.columns
              %label.right.inline{for: 'param_allowed_area'}= 'Allowed values (each in new line):'
            .small-9.columns
              %textarea#param_allowed_area{name: 'param_allowed_area', rows: 4}
              %small(class="error") Parameter is required
          .row#editor-buttons
            %ul.stack-for-small.button-group
              %li
                %a.tiny.button.radius.success#editor-save.disabled.unselectable
                  %i.fa.fa-save.fa-fw
                  = 'Save changes'
                %a.tiny.button.radius#editor-discard.disabled.unselectable
                  %i.fa.fa-undo.fa-fw
                  = 'Discard changes'

          #unsaved-modal.reveal-modal.small{'data-reveal' => true}
            .row{style: "margin-bottom: 25px;"}
              .small-12.columns
                = 'There are unsaved changes in parameter editor. Please save them or discard changes.'
            .row
              .small-12.columns.text-center
                %a#unsaved-ok.button.radius.medium= 'OK'

          #invalid-modal.reveal-modal.small{'data-reveal' => true}
            .row{style: "margin-bottom: 25px;"}
              .small-12.columns
                = 'There are invalid values in parameter editor. Please correct them or discard changes.'
            .row
              .small-12.columns.text-center
                %a#invalid-modal-ok.button.radius.medium= 'OK'

- content_for :javascript do
  :javascript
    $(document).foundation({
      abide: {
        validators: {
          validate_ranges: function(el, required, parent){
            if ($("#input-designer-on").hasClass('active')) {
              var from  = parseFloat($("#param_max").val());
              var to = parseFloat($("#param_min").val());
              if (!isNaN(from) && !isNaN(to)) {
                if (el.id == "param_max" && from >= to ){
                  $("#param_min").attr('aria-invalid','false');
                  $("#param_min").removeAttr('data-invalid');
                  document.getElementById("param_min_error_msg").style.display="none";
                  $("#label_min").removeClass("error");
                }
                if (el.id == "param_min" && from >= to ){
                  $("#param_max").attr('aria-invalid','false');
                  $("#param_max").removeAttr('data-invalid');
                  document.getElementById("param_max_error_msg").style.display="none";
                  $("#label_max").removeClass("error");
                }
                if (from < to){
                  $("#param_min_error_msg").removeAttr("style");
                  $("#param_max_error_msg").removeAttr("style");
                }
                return (from >= to);
              } else {
                return true;
              }
            } else {
              return true;
            }
          }
        }
      }
    });

    $('.menu li').click(function () {
      if ($(this).text().trim() == "Design") {
        $("#input-designer-on").addClass("active");
        $("#input-designer-off").removeClass("active");
        $("simulation_input_file").removeAttr('required');
      } else {
        $("#simulation_input_file").attr('required','required');
        $("#input-designer-on").removeClass("active");
        $("#input-designer-off").addClass("active");
      }
    });
