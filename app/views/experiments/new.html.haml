- es_url = sample_service_url('experiment_supervisors')
- supervisor_ids = get_supervisor_ids(es_url)
- wss_algorithms_descriptions = workers_scaling_algorithms_description
- plgrid_default_enabled = !InfrastructureFacadeFactory.get_facade_for(:qsub).get_resource_configurations(current_user.id).blank?

- content_for :title, t('.title')
- content_for :help, raw(t('help.simulations.conduct'))

-#:coffeescript
-#  window.alert("supervisors_ids: #{supervisor_ids.to_s}")

= form_tag experiments_path, id: 'experiment_submit_form', "data-abide" => '' do
  = hidden_field_tag 'simulation_id', @simulation.id
  = hidden_field_tag 'experiment_input'
  = hidden_field_tag 'doe'
  = hidden_field_tag 'calculate-experiment-size-url', calculate_experiment_size_experiments_path
  = hidden_field_tag 'parameters_constraints'
  = hidden_field_tag 'workers_scaling', false
  = hidden_field_tag 'workers_scaling_params'
  = render 'experiments/new/basic_information'

#experiment-type-panel
  %section.panel.radius
    %h3.subheader= t('experiments.optimization_method.title')
    .content
      .row
        .small-6.small-centered.columns
          - options = supervisor_options(supervisor_ids) == '' ? [t('experiments.optimization_method.manual')] : [t('experiments.optimization_method.manual'), t('experiments.optimization_method.automatic')]
          = select_tag 'experiment_type_select', options_for_select(options, t('experiments.optimization_method.manual'))

#manual-experiment-panel
  %section.panel.radius
    %h3.subheader= t('experiments.manual_experiment.title')
    .content
      .row
        .small-6.small-centered.columns
          = select_tag 'input_space_select', options_for_select([t('experiments.manual_experiment.manual_designed'), t('experiments.manual_experiment.csv_imported')], t('experiments.manual_experiment.manual_designed'))

#automatic-experiment-panel
  %section.panel.radius
    %h3.subheader= t('experiments.automatic_experiment.title')
    .content
      .row
        .small-6.small-centered.columns
          = select_tag 'supervisor_select', supervisor_options(supervisor_ids)
        .small-2.columns
          #supervisor_form_loader

= form_tag experiments_path, id: 'supervised_experiment_submit_form', "data-abide" => ''  do
  = hidden_field_tag 'simulation_id', @simulation.id
  = hidden_field_tag 'replication_level', 1
  = hidden_field_tag 'execution_time_constraint', 60
  = hidden_field_tag 'experiment_name'
  = hidden_field_tag 'experiment_description'
  = hidden_field_tag 'workers_scaling', false
  = hidden_field_tag 'workers_scaling_params'
  #supervisor_fields

#input-space-parameters
  %section.panel.radius.simulation_input
    %h3.subheader#manual-header= t('.input_header')

    .content
      %dl.tabs(data-tab="")
        %dd.active
          = link_to t('.input_parametrization_types'), '#parametrization'
        %dd
          = link_to t('.input_doe'), '#doe'
        %dd
          = link_to t('.params_constraints'), '#constraints'

      .tabs-content
        #parametrization.content.active
          = render 'experiments/new/parametrization'
        #doe.content
          = render 'experiments/new/design_of_experiment'
        #constraints.content
          = render 'experiments/new/parameter_constraints'

      #invalid-form.reveal-modal(data-reveal="true")
        %h2.subheader.text-center Form has some invalid fields
        .small-12.columns.text-center
          %a#invalid-ok.button.radius.medium= 'OK'

#import{:style => 'display: none'}
  %section.panel.radius
    = render 'experiments/new/import_tab'

#workers-scaling-mode
  %section.panel.radius
    %h3.subheader= t('experiments.workers_scaling.mode.title')
    .content
      .row
        .small-6.small-centered.columns
          - ws_algorithm_options = workers_scaling_options
          - ws_plgrid_default = [t('experiments.workers_scaling.mode.plgrid_default'), :plgrid_default]
          - ws_manual = [t('experiments.workers_scaling.mode.manual'), :manual]
          - ws_automatic = [t('experiments.workers_scaling.mode.automatic'), :automatic ]
          - workers_scaling_mode = []
          - workers_scaling_mode << ws_plgrid_default if plgrid_default_enabled
          - workers_scaling_mode << ws_manual
          - workers_scaling_mode << ws_automatic unless ws_algorithm_options == ''
          = select_tag 'workers_scaling_mode_select', options_for_select(workers_scaling_mode, workers_scaling_mode.first)
          #plgrid_default{:style => 'display: none'}
            = t('experiments.workers_scaling.plgrid_default')
            .row
              .small-5.columns
                = label_tag :time_limit_plgrid, t('infrastructure.information.time_constraint') + ':', class: 'inline right'
              .small-4.columns.end
                = number_field_tag :time_limit_plgrid, 60, min: 1, step: 1, required: true, pattern: "^\\d+$", class: 'text-right'

#workers-scaling-algorithm{:style => 'display: none'}
  %section.panel.radius
    %h3.subheader= t('experiments.workers_scaling.algorithm.title')
    .content
      .row
        .small-6.small-centered.columns
          .row
            .small-4.columns
              = label_tag :experiment_execution_time_limit,
                  t('experiments.workers_scaling.algorithm.method_selection') + ':',
                  class: 'right inline'
            .small-7.columns
              = select_tag 'workers_scaling_algorithm_select', ws_algorithm_options
            .small-1.columns
              %i.fa.fa-question-circle.has-tip.tip-bottom{'aria-haspopup' => 'true', 'data-tooltip' => '',
              style: 'color: 333', title: '', cursor: 'pointer', id: 'algorithm_description'}
      .row
        .small-5.columns
          = label_tag :experiment_execution_time_limit,
              t('experiments.workers_scaling.algorithm.execution_time_limit') + ':',
              class: 'right inline'
        .small-4.columns.end
          .row.collapse
            .small-8.columns
              = number_field_tag :experiment_execution_time_limit, 30, required: true,
                  class: 'text-right', pattern: "^\\d+$"
            .small-4.columns
              %span.postfix.radius
                = t('experiments.workers_scaling.algorithm.execution_time_unit')

      = render partial: 'allowed_resource_configurations_editor'


.row.submit-section
  = submit_tag t('.submit_button'), id: 'new_experiment_submit', class: 'button radius last-element'
  = button_tag t('.experiment_size_button'), class: 'button radius last-element', id: 'check-experiment-size'
  = image_tag 'loading.gif', id: 'conduct-loading', style: 'display: none;'

#experiment-size-dialog.reveal-modal(data-reveal="" style="display: none;")
  %h2.subheader= raw t('.experiment_size_dialog_body')
  %a.close-reveal-modal &#215;

#error-dialog.reveal-modal.hidden(data-reveal="")
  %h2.subheader= t(".error_dialog_header")
  %a.close-reveal-modal &#215;

  .alert-box.alert.radius.hidden(data-alert="")

- content_for :javascript do
  :javascript
    $(function() {
      var wss_algorithms_descriptions = JSON.parse('#{raw(workers_scaling_algorithms_description.to_json)}');
      var es_url = "#{es_url}";
      if (es_url) {
        new window.SupervisorBooster(es_url);
      } else {
        window.console.log("ExperimentSupervisor view script was not loaded due to lack of ES url");
      }
      window.scenario_registration = new window.AllowedResourceConfigurations();

      window.toggle_panels_on_title_click();
      var input_space = new window.InputSpace(#{raw @simulation.input_specification.to_json});
      var input_space_importer = new window.InputSpaceImporter("#{simulations_upload_parameter_space_path}",
                                                               "#{calculate_imported_experiment_size_experiments_path}");

      var parameter_constraints_manager = new window.ParameterConstraintsManager();

      var doe_manager = new window.ExperimentDesigner(input_space);
      $("#invalid-ok").bind("click", function() {
        $('#invalid-form').foundation('reveal', 'close');
        $('html, body').animate({
          scrollTop: $("#experiment_submit_form").offset().top
      }, 2000);});

      function fill_workers_scaling_fields() {
        $("input[name='workers_scaling']").val(true);
        var builder = {};
        builder["name"] = $("#workers_scaling_algorithm_select").val();
        builder["experiment_execution_time_limit"] = Number($("#experiment_execution_time_limit").val());
        builder["allowed_resource_configurations"] = window.scenario_registration.getAllowedResourceConfigurations();
        $("input[name='workers_scaling_params']").val(JSON.stringify(builder));
      }

      function fill_workers_scaling_fields_with_plgrid_default() {
        $("input[name='workers_scaling']").val(true);
        var builder = {};
        builder["plgrid_default"] = true;
        builder["worker_time_limit"] = Number($("input[name='time_limit_plgrid']").val());
        $("input[name='workers_scaling_params']").val(JSON.stringify(builder));
      }

      function delete_workers_scaling_fields() {
        $('input#workers_scaling').remove()
        $('input#workers_scaling_params').remove()
      }

      $("#new_experiment_submit").on("click", function() {
        if (!$("#workers_scaling_mode_select").val().localeCompare("automatic")) {
          fill_workers_scaling_fields();
        } else if (!$("#workers_scaling_mode_select").val().localeCompare("plgrid_default")) {
          fill_workers_scaling_fields_with_plgrid_default();
        } else {
          delete_workers_scaling_fields();
        }

        if($('#import').is(":visible"))
          $("#import-form").submit();
        else{
          if ($("#wrapper").find(':input[data-invalid]:visible').length==0){
            if($('#input-space-parameters').is(":visible")) {
              // standart experiment
              parameter_constraints_manager.getParametersConstraints();
              input_space.updateAllInputParameterValues();
              $("#experiment_submit_form").submit();
            } else {
            // supervised
            var builder = {};
            $('#supervisor_fields *').filter(':input').each(function(key, value){
                if (value.name != "utf8" && value.name != "authenticity_token") {
                  if (value.type == 'number') {
                    builder[value.name] = Number(value.value)
                  } else {
                    builder[value.name] = value.value
                  }
                }
            });
            $("input[name='supervisor_script_params']").val(JSON.stringify(builder));
            $("#supervised_experiment_submit_form #replication_level").val($("#experiment_submit_form #replication_level").val())
            $("#supervised_experiment_submit_form #execution_time_constraint").val($("#experiment_submit_form #execution_time_constraint").val())
            $("#supervised_experiment_submit_form #experiment_name").val($("#experiment_submit_form #experiment_name").val())
            $("#supervised_experiment_submit_form #experiment_description").val($("#experiment_submit_form #experiment_description").val())
            $("#supervised_experiment_submit_form").submit();
          }
        }
        else
        {
          $('#invalid-form').foundation('reveal', 'open');
        }
      }
      });

      $("#check-experiment-size").on("click", function() {
        if($("#input-space-parameters").is(":visible")) {
          doe_manager.checkExperimentSize();
        }
        else {
          input_space_importer.checkImportedSize();
        }
      });

      $("#createDoeGroupBtn").on("click", function() { doe_manager.createDoeGroup('doe_type'); });

      $(document).ready(function (){
        set_visible_panels();

      });

      function set_visible_panels() {
        if (!$("#experiment_type_select").find(":selected").val().localeCompare("#{t('experiments.optimization_method.manual')}" )) {
          $("#manual-experiment-panel").show();
          $('#check-experiment-size').show()
          $("#automatic-experiment-panel").hide();
          $('#supervisor_fields').empty()
          $("#supervised_experiment_submit_form").hide();
          if (!$("#input_space_select").find(":selected").val().localeCompare("#{t('experiments.manual_experiment.manual_designed')}")) {
            $("#import").hide();
            $("#input-space-parameters").show();
          }
          else if (!$("#input_space_select").find(":selected").val().localeCompare("#{t('experiments.manual_experiment.csv_imported')}")) {
            $("#input-space-parameters").hide();
            $("#import").show();
          }
        }
        else if (!$("#experiment_type_select").find(":selected").val().localeCompare("#{t('experiments.optimization_method.automatic')}") ) {
          $("#supervised_experiment_submit_form").show();
          $("#automatic-experiment-panel").show();
          $("#manual-experiment-panel").hide();
          $("#import").hide();
          $("#input-space-parameters").hide();
          $('#check-experiment-size').hide()
        }
      }

      $("#experiment_type_select").on("change", function() {
        set_visible_panels();
      });

      $("#input_space_select").on("change", function() {
        if (!$("#input_space_select").find(":selected").val().localeCompare("#{t('experiments.manual_experiment.manual_designed')}")) {
          $("#input-space-parameters").show();
          $("#import").hide();
        }
        else if (!$("#input_space_select").find(":selected").val().localeCompare("#{t('experiments.manual_experiment.csv_imported')}")) {
          $("#import").show();
          $("#input-space-parameters").hide();
        }
      });

      // workers scaling
      workers_scaling_mode_select_on_change = function() {
        if (!$("#workers_scaling_mode_select").val().localeCompare("manual")) {
          $("#workers-scaling-algorithm").hide();
          $("#plgrid_default").hide();
        } else if (!$("#workers_scaling_mode_select").val().localeCompare("automatic")) {
          $("#workers-scaling-algorithm").show();
          $("#plgrid_default").hide();
        } else if (!$("#workers_scaling_mode_select").val().localeCompare("plgrid_default")) {
          $("#plgrid_default").show();
          $("#workers-scaling-algorithm").hide();
        }
      };
      workers_scaling_mode_select_on_change();
      $("#workers_scaling_mode_select").on("change", workers_scaling_mode_select_on_change);
      workers_scaling_algorithm_select_change = function(){
        Foundation.libs.tooltip.getTip($('#algorithm_description')).contents().first()
          .replaceWith(wss_algorithms_descriptions[$("#workers_scaling_algorithm_select").val()]);
      }
      $("#workers_scaling_algorithm_select").on("change", workers_scaling_algorithm_select_change);
      workers_scaling_algorithm_select_change();
    });
