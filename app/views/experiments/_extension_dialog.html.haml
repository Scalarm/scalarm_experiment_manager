%h2= t('experiments.extension_dialog.header')
= form_tag(extend_input_values_experiment_path, remote: true, class: 'custom', id: 'experiment-extension-form', 'data-abide' =>'') do
  = tag(:input, type: "hidden", name: request_forgery_protection_token.to_s, value: form_authenticity_token)
  .row
    .small-3.columns
      %h4.subheader.right= t('experiments.extension_dialog.parameter')
    .small-9.columns
      = select_tag 'param_name',
          options_for_select(@parameters.map{|parameter_uid, parameter_info| [ parameter_info[:label], parameter_uid ] }),
          class: 'expand'

  - counter = 0
  - @parameters.each do |parameter_uid, parameter_info|
    - counter += 1
    .parameter-values{ 'parameter_uid' => parameter_uid, 'style' => "display: #{counter == 1 ? 'display' : 'none'};" }
      -#%h3.subheader= parameter_info[:label]
      .row
        .small-3.columns
          %h4.subheader.right= t 'experiments.extension_dialog.parametrization'
        .small-9.columns
          %h4.subheader= parameter_info[:parametrizationType]

      .row
        .small-3.columns
          %h4.subheader.right= t 'experiments.extension_dialog.doe'
        .small-9.columns
          %h4.subheader= parameter_info[:in_doe]

      .row
        .small-3.columns
          %h4.subheader.right= t 'experiments.extension_dialog.values'
        .small-9.columns
          .panel.log-box(style="font-size: 1.2em;")
            - parameter_info[:values].each do |value|
              = value
              %br

  .row.small-12.columns
    %h3.subheader= t('experiments.extension_dialog.expand_header')
  -#.row
  -#  = content_tag(:div, content_tag(:label, 'Priority:', class: 'inline right'), class: 'small-4 columns') + content_tag(:div, select_tag('priority', options_for_select([['Standard', 40], ['High', 20], ['Low', 60]])), class: 'small-8 columns')
  .row
    .small-3.columns
      %h4.subheader.right= t('experiments.extension_dialog.minimum') + ':'
    .small-4.columns
      = text_field_tag 'range_min','', style: "margin-bottom: 5px;", required: 'true', pattern: "^-?[0-9]*\\.?[0-9]+$", "data-abide-validator" => 'validate_ranges'
      %small(id="range_min_error_msg" class="error") Invalid minimum value. It is required and must be equal to or less than maximum
    .small-3.columns
  .row
    .small-3.columns
      %h4.subheader.right= t('experiments.extension_dialog.maximum') + ':'
    .small-4.columns
      = text_field_tag 'range_max', '',style: "margin-bottom: 5px;", required: 'true', pattern: "^-?[0-9]*\\.?[0-9]+$", "data-abide-validator" => 'validate_ranges'
      %small(id="range_max_error_msg" class="error") Invalid maximum value. It is required and must be equal to or greater than minimum
    .small-3.columns
  .row
    .small-3.columns
      %h4.subheader.right= t('experiments.extension_dialog.step') + ':'
    .small-4.columns
      = text_field_tag 'range_step','',style: "margin-bottom: 5px;", required: 'true', pattern: "^[0-9]*[1-9][0-9]*$"
      %small(class="error") Invalid step value. It is required and must be a positive number
    .small-3.columns
  .row.small-12.columns(style="text-align: center")
    = submit_tag('Submit', class: 'button radius')

%a.close-reveal-modal &#215;

:javascript
  $(function() {
    $(document).foundation({
      abide : {
        live_validate : true,
        validate_on_blur : true,
        focus_on_invalid : true,
        timeout : 10,
        validators: {
          validate_ranges: function(el, required, parent){
            var from  = parseFloat($("#range_max").val());
            var to = parseFloat($("#range_min").val());
            if (!isNaN(from) && !isNaN(to)) {
              if (el.id == "range_max" && from >= to ){
                $("#range_min").attr('aria-invalid','false');
                $("#range_min").removeAttr('data-invalid');
                document.getElementById("range_min_error_msg").style.display="none";

              }
              if (el.id == "range_min" && from >= to ){
                $("#range_max").attr('aria-invalid','false');
                $("#range_max").removeAttr('data-invalid');
                document.getElementById("range_max_error_msg").style.display="none";
               // $("#label_max").removeClass("error");
              }
              if (from < to){
                $("range_min_error_msg").removeAttr("style");
                $("#range_max_error_msg").removeAttr("style");
              }
              return (from >= to);
            } else {
              return true;
            }
          }
        }
      }
    });
    $('#experiment-extension-form #param_name').on('change', function() {
      $('#experiment-extension-form [parameter_uid]').hide();
      $("#experiment-extension-form [parameter_uid='" + $('#experiment-extension-form #param_name').val() + "']").show();
    });
    $("#experiment-extension-form").on('invalid.fndtn.abide', function(){
        $(this).find('[data-invalid]').blur();
    });
    $('#experiment-extension-form').on('submit', function() {
      if ($("#experiment-extension-form").find(':input[data-invalid]:visible').length==0){
      //$("#experiment-extension-form").on('valid.fndtn.abide', function(){
        $( '#extension-dialog' ).foundation('reveal', 'close');
        $( '#extension-dialog' ).html("");
        window.Notices.show_loading_notice();
      }
    });

    $('#extension-dialog').trigger('extension-dialog-loaded');
  });
