%article#workers_scaling_info
  .row
    .small-12.columns
      %strong
        = t('experiments.workers_scaling.information_panel.workers_scaling_active')

  - algorithm = WorkersScaling::AlgorithmFactory.get_algorithm(@experiment.id.to_s)
  .row
    .small-3.columns
      %strong
        = t('experiments.workers_scaling.information_panel.algorithm_name') + ':'
    .small-9.columns
      = algorithm.blank? ? t('experiments.workers_scaling.information_panel.unknown_algorithm') : algorithm.class.algorithm_name

  - unless @experiment.plgrid_default
    .row
      .small-3.columns
        %strong
          = t('experiments.workers_scaling.information_panel.execution_time.planned') + ':'
      .small-9.columns
        %span#planned_finish_time ''

  .row
    .small-3.columns
      %strong
        = t('experiments.workers_scaling.information_panel.execution_time.expected') + ':'
    .small-9.columns
      %span#expected_finish_time ''

  - unless @experiment.plgrid_default
    .row
      .small-9.columns
        %strong{id: 'time_constraints_warning', style: 'font-weight: bold; color: red; display: none' }
          = t('experiments.workers_scaling.information_panel.execution_time.warning')

  .row
    .small-9.columns
      %strong{id: 'workers_scaling_error', style: 'font-weight: bold; color: red; display: none' }
        = t('experiments.workers_scaling.information_panel.error')

- content_for :javascript do
  :javascript
    var plgrid_default = "#{@experiment.plgrid_default}"
    var planned_finish_time = new Date("#{@experiment.planned_finish_time}");
    window.updateWorkersScalingStatus = function() {
      $.getJSON("/experiments/#{@experiment.id.to_s}/stats",
                {
                  simulations_statistics: false,
                  progress_bar: false,
                  predicted_finish_time: true,
                  workers_scaling_active: true,
                },
                function(data) {
          if (data.completed == true) {
            if (!plgrid_default) {
              $('#time_constraints_warning').hide();
            }
            $('#workers_scaling_error').hide();
            $('#expected_finish_time').text("#{t('experiments.workers_scaling.information_panel.execution_time.finished')}")
          } else {
            if (data.workers_scaling_active == true) {
              $('#workers_scaling_error').hide();
            } else {
              $('#workers_scaling_error').show();
            }
            if (data.predicted_finish_time == -1) {
              if (!plgrid_default) {
                $('#time_constraints_warning').show();
              }
              $('#expected_finish_time').text("#{t('experiments.workers_scaling.information_panel.execution_time.unknown')}")
            } else {
              var predicted_finish_time = new Date(data.predicted_finish_time*1000);
              $('#expected_finish_time').text(predicted_finish_time.toString());
              if (!plgrid_default) {
                if (predicted_finish_time > planned_finish_time) {
                  $('#time_constraints_warning').show()
                } else {
                  $('#time_constraints_warning').hide()
                }
              }
            }
          }
        });
      };
    $(function() {
      window.updateWorkersScalingStatus();
      setInterval(window.updateWorkersScalingStatus, 30000);
    });
    $('#planned_finish_time').text(planned_finish_time.toString());



